package org.ajdeveloppement.webserver.data;

import javax.annotation.Generated;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;
import org.ajdeveloppement.commons.persistence.sql.QResults;
import org.ajdeveloppement.commons.persistence.sql.QField;
import org.ajdeveloppement.commons.persistence.ObjectPersistenceException;

@Generated(value="Generated by ajcommons")
@SuppressWarnings({"nls","javadoc"})
public class T_Request {
	public static final String TABLE_NAME = "AJWEBSERVER.Request";

	/**
	 * Object Binder for IdRequest field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.Long> IDREQUEST = new QField<>(TABLE_NAME,"IdRequest");

	/**
	 * Object Binder for Date field of table AJWEBSERVER.Request
	 */
	public static final QField<java.util.Date> DATE = new QField<>(TABLE_NAME,"Date");

	/**
	 * Object Binder for Method field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> METHOD = new QField<>(TABLE_NAME,"Method");

	/**
	 * Object Binder for Uri field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> URI = new QField<>(TABLE_NAME,"Uri");

	/**
	 * Object Binder for Host field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> HOST = new QField<>(TABLE_NAME,"Host");

	/**
	 * Object Binder for RequestLength field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.Long> REQUESTLENGTH = new QField<>(TABLE_NAME,"RequestLength");

	/**
	 * Object Binder for ResponseLength field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.Long> RESPONSELENGTH = new QField<>(TABLE_NAME,"ResponseLength");

	/**
	 * Object Binder for ResponseCode field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.Integer> RESPONSECODE = new QField<>(TABLE_NAME,"ResponseCode");

	/**
	 * Object Binder for RemoteAddress field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> REMOTEADDRESS = new QField<>(TABLE_NAME,"RemoteAddress");

	/**
	 * Object Binder for UserAgent field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> USERAGENT = new QField<>(TABLE_NAME,"UserAgent");

	/**
	 * Object Binder for Referer field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> REFERER = new QField<>(TABLE_NAME,"Referer");

	/**
	 * Object Binder for Header field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> HEADER = new QField<>(TABLE_NAME,"Header");

	/**
	 * Object Binder for ResourcePath field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> RESOURCEPATH = new QField<>(TABLE_NAME,"ResourcePath");

	/**
	 * Object Binder for Duration field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.Long> DURATION = new QField<>(TABLE_NAME,"Duration");

	/**
	 * Object Binder for Exception field of table AJWEBSERVER.Request
	 */
	public static final QField<java.lang.String> EXCEPTION = new QField<>(TABLE_NAME,"Exception");

	/**
	 * Return all instance in database as QResults iterator
	 */
	public static QResults<Request, Void> all() {
		return QResults.from(Request.class);
	}

	public static Request getInstanceWithPrimaryKey(long idrequest) {
		return QResults.from(Request.class).where(IDREQUEST.equalTo(idrequest)).first();
	}

	public static Map<String, Object> getPrimaryKeyMap(ResultSet rs) throws SQLException, ObjectPersistenceException {
		return getPrimaryKeyMap(getPrimaryKeyValues(rs));
	}

	public static Map<String, Object> getPrimaryKeyMap(Object... pkValues) {
		if(pkValues == null || pkValues.length != 1)
			return null;

		Map<String, Object> persistenceInformations = new HashMap<String, Object>();
		persistenceInformations.put("IdRequest",pkValues[0]);
		return persistenceInformations;
	}

	public static Object[] getPrimaryKeyValues(ResultSet rs) throws SQLException, ObjectPersistenceException {
		Object[] pkValues = new Object[] {
			IDREQUEST.getValue(rs)
		};
		return pkValues;
	}
}